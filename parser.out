Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA

Grammar

Rule 0     S' -> program
Rule 1     program -> BEGIN statementList END
Rule 2     empty -> <empty>
Rule 3     statementList -> statement SEMICOLON statementList
Rule 4     statementList -> empty
Rule 5     statement -> IDENTIFIER ASSIGN expression
Rule 6     statement -> TYPE IDENTIFIER ASSIGN expression
Rule 7     statement -> IF relation THEN statementList FI
Rule 8     statement -> IF relation THEN statementList ELSE statementList FI
Rule 9     statement -> WHILE relation DO statementList OD
Rule 10    statement -> WRITE LPAREN expression RPAREN
Rule 11    expression -> term
Rule 12    expression -> expression ADDOP term
Rule 13    term -> factor
Rule 14    term -> factor MULOP factor
Rule 15    factor -> IDENTIFIER
Rule 16    factor -> LPAREN TYPE RPAREN IDENTIFIER
Rule 17    factor -> NUMBER_INT
Rule 18    factor -> NUMBER_FLOAT
Rule 19    factor -> READ
Rule 20    factor -> LPAREN expression RPAREN
Rule 21    factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN
Rule 22    relation -> expression CMP expression

Terminals, with rules where they appear

ADDOP                : 12
ASSIGN               : 5 6
BEGIN                : 1
CMP                  : 22
COMMA                : 
DO                   : 9
ELSE                 : 8
END                  : 1
FI                   : 7 8
IDENTIFIER           : 5 6 15 16
IF                   : 7 8
LPAREN               : 10 16 20 21 21
MULOP                : 14
NUMBER_FLOAT         : 18
NUMBER_INT           : 17
OD                   : 9
READ                 : 19
RPAREN               : 10 16 20 21 21
SEMICOLON            : 3
THEN                 : 7 8
TYPE                 : 6 16 21
WHILE                : 9
WRITE                : 10
error                : 

Nonterminals, with rules where they appear

empty                : 4
expression           : 5 6 10 12 20 21 22 22
factor               : 13 14 14
program              : 0
relation             : 7 8 9
statement            : 3
statementList        : 1 3 7 8 8 9
term                 : 11 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BEGIN statementList END

    BEGIN           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BEGIN . statementList END
    (3) statementList -> . statement SEMICOLON statementList
    (4) statementList -> . empty
    (5) statement -> . IDENTIFIER ASSIGN expression
    (6) statement -> . TYPE IDENTIFIER ASSIGN expression
    (7) statement -> . IF relation THEN statementList FI
    (8) statement -> . IF relation THEN statementList ELSE statementList FI
    (9) statement -> . WHILE relation DO statementList OD
    (10) statement -> . WRITE LPAREN expression RPAREN
    (2) empty -> .

    IDENTIFIER      shift and go to state 6
    TYPE            shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    WRITE           shift and go to state 10
    END             reduce using rule 2 (empty -> .)

    statementList                  shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5

state 3

    (1) program -> BEGIN statementList . END

    END             shift and go to state 11


state 4

    (3) statementList -> statement . SEMICOLON statementList

    SEMICOLON       shift and go to state 12


state 5

    (4) statementList -> empty .

    END             reduce using rule 4 (statementList -> empty .)
    FI              reduce using rule 4 (statementList -> empty .)
    ELSE            reduce using rule 4 (statementList -> empty .)
    OD              reduce using rule 4 (statementList -> empty .)


state 6

    (5) statement -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 13


state 7

    (6) statement -> TYPE . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 14


state 8

    (7) statement -> IF . relation THEN statementList FI
    (8) statement -> IF . relation THEN statementList ELSE statementList FI
    (22) relation -> . expression CMP expression
    (11) expression -> . term
    (12) expression -> . expression ADDOP term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    relation                       shift and go to state 15
    expression                     shift and go to state 16
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 9

    (9) statement -> WHILE . relation DO statementList OD
    (22) relation -> . expression CMP expression
    (11) expression -> . term
    (12) expression -> . expression ADDOP term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    relation                       shift and go to state 24
    expression                     shift and go to state 16
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 10

    (10) statement -> WRITE . LPAREN expression RPAREN

    LPAREN          shift and go to state 25


state 11

    (1) program -> BEGIN statementList END .

    $end            reduce using rule 1 (program -> BEGIN statementList END .)


state 12

    (3) statementList -> statement SEMICOLON . statementList
    (3) statementList -> . statement SEMICOLON statementList
    (4) statementList -> . empty
    (5) statement -> . IDENTIFIER ASSIGN expression
    (6) statement -> . TYPE IDENTIFIER ASSIGN expression
    (7) statement -> . IF relation THEN statementList FI
    (8) statement -> . IF relation THEN statementList ELSE statementList FI
    (9) statement -> . WHILE relation DO statementList OD
    (10) statement -> . WRITE LPAREN expression RPAREN
    (2) empty -> .

    IDENTIFIER      shift and go to state 6
    TYPE            shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    WRITE           shift and go to state 10
    END             reduce using rule 2 (empty -> .)
    FI              reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    OD              reduce using rule 2 (empty -> .)

    statement                      shift and go to state 4
    statementList                  shift and go to state 26
    empty                          shift and go to state 5

state 13

    (5) statement -> IDENTIFIER ASSIGN . expression
    (11) expression -> . term
    (12) expression -> . expression ADDOP term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    expression                     shift and go to state 27
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 14

    (6) statement -> TYPE IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 28


state 15

    (7) statement -> IF relation . THEN statementList FI
    (8) statement -> IF relation . THEN statementList ELSE statementList FI

    THEN            shift and go to state 29


state 16

    (22) relation -> expression . CMP expression
    (12) expression -> expression . ADDOP term

    CMP             shift and go to state 30
    ADDOP           shift and go to state 31


state 17

    (11) expression -> term .

    CMP             reduce using rule 11 (expression -> term .)
    ADDOP           reduce using rule 11 (expression -> term .)
    SEMICOLON       reduce using rule 11 (expression -> term .)
    RPAREN          reduce using rule 11 (expression -> term .)
    THEN            reduce using rule 11 (expression -> term .)
    DO              reduce using rule 11 (expression -> term .)


state 18

    (13) term -> factor .
    (14) term -> factor . MULOP factor

    CMP             reduce using rule 13 (term -> factor .)
    ADDOP           reduce using rule 13 (term -> factor .)
    SEMICOLON       reduce using rule 13 (term -> factor .)
    RPAREN          reduce using rule 13 (term -> factor .)
    THEN            reduce using rule 13 (term -> factor .)
    DO              reduce using rule 13 (term -> factor .)
    MULOP           shift and go to state 32


state 19

    (15) factor -> IDENTIFIER .

    MULOP           reduce using rule 15 (factor -> IDENTIFIER .)
    CMP             reduce using rule 15 (factor -> IDENTIFIER .)
    ADDOP           reduce using rule 15 (factor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 15 (factor -> IDENTIFIER .)
    RPAREN          reduce using rule 15 (factor -> IDENTIFIER .)
    THEN            reduce using rule 15 (factor -> IDENTIFIER .)
    DO              reduce using rule 15 (factor -> IDENTIFIER .)


state 20

    (16) factor -> LPAREN . TYPE RPAREN IDENTIFIER
    (20) factor -> LPAREN . expression RPAREN
    (21) factor -> LPAREN . TYPE RPAREN LPAREN expression RPAREN
    (11) expression -> . term
    (12) expression -> . expression ADDOP term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    TYPE            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    expression                     shift and go to state 34
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 21

    (17) factor -> NUMBER_INT .

    MULOP           reduce using rule 17 (factor -> NUMBER_INT .)
    CMP             reduce using rule 17 (factor -> NUMBER_INT .)
    ADDOP           reduce using rule 17 (factor -> NUMBER_INT .)
    SEMICOLON       reduce using rule 17 (factor -> NUMBER_INT .)
    RPAREN          reduce using rule 17 (factor -> NUMBER_INT .)
    THEN            reduce using rule 17 (factor -> NUMBER_INT .)
    DO              reduce using rule 17 (factor -> NUMBER_INT .)


state 22

    (18) factor -> NUMBER_FLOAT .

    MULOP           reduce using rule 18 (factor -> NUMBER_FLOAT .)
    CMP             reduce using rule 18 (factor -> NUMBER_FLOAT .)
    ADDOP           reduce using rule 18 (factor -> NUMBER_FLOAT .)
    SEMICOLON       reduce using rule 18 (factor -> NUMBER_FLOAT .)
    RPAREN          reduce using rule 18 (factor -> NUMBER_FLOAT .)
    THEN            reduce using rule 18 (factor -> NUMBER_FLOAT .)
    DO              reduce using rule 18 (factor -> NUMBER_FLOAT .)


state 23

    (19) factor -> READ .

    MULOP           reduce using rule 19 (factor -> READ .)
    CMP             reduce using rule 19 (factor -> READ .)
    ADDOP           reduce using rule 19 (factor -> READ .)
    SEMICOLON       reduce using rule 19 (factor -> READ .)
    RPAREN          reduce using rule 19 (factor -> READ .)
    THEN            reduce using rule 19 (factor -> READ .)
    DO              reduce using rule 19 (factor -> READ .)


state 24

    (9) statement -> WHILE relation . DO statementList OD

    DO              shift and go to state 35


state 25

    (10) statement -> WRITE LPAREN . expression RPAREN
    (11) expression -> . term
    (12) expression -> . expression ADDOP term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    expression                     shift and go to state 36
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 26

    (3) statementList -> statement SEMICOLON statementList .

    END             reduce using rule 3 (statementList -> statement SEMICOLON statementList .)
    FI              reduce using rule 3 (statementList -> statement SEMICOLON statementList .)
    ELSE            reduce using rule 3 (statementList -> statement SEMICOLON statementList .)
    OD              reduce using rule 3 (statementList -> statement SEMICOLON statementList .)


state 27

    (5) statement -> IDENTIFIER ASSIGN expression .
    (12) expression -> expression . ADDOP term

    SEMICOLON       reduce using rule 5 (statement -> IDENTIFIER ASSIGN expression .)
    ADDOP           shift and go to state 31


state 28

    (6) statement -> TYPE IDENTIFIER ASSIGN . expression
    (11) expression -> . term
    (12) expression -> . expression ADDOP term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    expression                     shift and go to state 37
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 29

    (7) statement -> IF relation THEN . statementList FI
    (8) statement -> IF relation THEN . statementList ELSE statementList FI
    (3) statementList -> . statement SEMICOLON statementList
    (4) statementList -> . empty
    (5) statement -> . IDENTIFIER ASSIGN expression
    (6) statement -> . TYPE IDENTIFIER ASSIGN expression
    (7) statement -> . IF relation THEN statementList FI
    (8) statement -> . IF relation THEN statementList ELSE statementList FI
    (9) statement -> . WHILE relation DO statementList OD
    (10) statement -> . WRITE LPAREN expression RPAREN
    (2) empty -> .

    IDENTIFIER      shift and go to state 6
    TYPE            shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    WRITE           shift and go to state 10
    FI              reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    statementList                  shift and go to state 38
    statement                      shift and go to state 4
    empty                          shift and go to state 5

state 30

    (22) relation -> expression CMP . expression
    (11) expression -> . term
    (12) expression -> . expression ADDOP term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    expression                     shift and go to state 39
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 31

    (12) expression -> expression ADDOP . term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    term                           shift and go to state 40
    factor                         shift and go to state 18

state 32

    (14) term -> factor MULOP . factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    factor                         shift and go to state 41

state 33

    (16) factor -> LPAREN TYPE . RPAREN IDENTIFIER
    (21) factor -> LPAREN TYPE . RPAREN LPAREN expression RPAREN

    RPAREN          shift and go to state 42


state 34

    (20) factor -> LPAREN expression . RPAREN
    (12) expression -> expression . ADDOP term

    RPAREN          shift and go to state 43
    ADDOP           shift and go to state 31


state 35

    (9) statement -> WHILE relation DO . statementList OD
    (3) statementList -> . statement SEMICOLON statementList
    (4) statementList -> . empty
    (5) statement -> . IDENTIFIER ASSIGN expression
    (6) statement -> . TYPE IDENTIFIER ASSIGN expression
    (7) statement -> . IF relation THEN statementList FI
    (8) statement -> . IF relation THEN statementList ELSE statementList FI
    (9) statement -> . WHILE relation DO statementList OD
    (10) statement -> . WRITE LPAREN expression RPAREN
    (2) empty -> .

    IDENTIFIER      shift and go to state 6
    TYPE            shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    WRITE           shift and go to state 10
    OD              reduce using rule 2 (empty -> .)

    statementList                  shift and go to state 44
    statement                      shift and go to state 4
    empty                          shift and go to state 5

state 36

    (10) statement -> WRITE LPAREN expression . RPAREN
    (12) expression -> expression . ADDOP term

    RPAREN          shift and go to state 45
    ADDOP           shift and go to state 31


state 37

    (6) statement -> TYPE IDENTIFIER ASSIGN expression .
    (12) expression -> expression . ADDOP term

    SEMICOLON       reduce using rule 6 (statement -> TYPE IDENTIFIER ASSIGN expression .)
    ADDOP           shift and go to state 31


state 38

    (7) statement -> IF relation THEN statementList . FI
    (8) statement -> IF relation THEN statementList . ELSE statementList FI

    FI              shift and go to state 46
    ELSE            shift and go to state 47


state 39

    (22) relation -> expression CMP expression .
    (12) expression -> expression . ADDOP term

    THEN            reduce using rule 22 (relation -> expression CMP expression .)
    DO              reduce using rule 22 (relation -> expression CMP expression .)
    ADDOP           shift and go to state 31


state 40

    (12) expression -> expression ADDOP term .

    CMP             reduce using rule 12 (expression -> expression ADDOP term .)
    ADDOP           reduce using rule 12 (expression -> expression ADDOP term .)
    SEMICOLON       reduce using rule 12 (expression -> expression ADDOP term .)
    RPAREN          reduce using rule 12 (expression -> expression ADDOP term .)
    THEN            reduce using rule 12 (expression -> expression ADDOP term .)
    DO              reduce using rule 12 (expression -> expression ADDOP term .)


state 41

    (14) term -> factor MULOP factor .

    CMP             reduce using rule 14 (term -> factor MULOP factor .)
    ADDOP           reduce using rule 14 (term -> factor MULOP factor .)
    SEMICOLON       reduce using rule 14 (term -> factor MULOP factor .)
    RPAREN          reduce using rule 14 (term -> factor MULOP factor .)
    THEN            reduce using rule 14 (term -> factor MULOP factor .)
    DO              reduce using rule 14 (term -> factor MULOP factor .)


state 42

    (16) factor -> LPAREN TYPE RPAREN . IDENTIFIER
    (21) factor -> LPAREN TYPE RPAREN . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 49
    LPAREN          shift and go to state 48


state 43

    (20) factor -> LPAREN expression RPAREN .

    MULOP           reduce using rule 20 (factor -> LPAREN expression RPAREN .)
    CMP             reduce using rule 20 (factor -> LPAREN expression RPAREN .)
    ADDOP           reduce using rule 20 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 20 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 20 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 20 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 20 (factor -> LPAREN expression RPAREN .)


state 44

    (9) statement -> WHILE relation DO statementList . OD

    OD              shift and go to state 50


state 45

    (10) statement -> WRITE LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 10 (statement -> WRITE LPAREN expression RPAREN .)


state 46

    (7) statement -> IF relation THEN statementList FI .

    SEMICOLON       reduce using rule 7 (statement -> IF relation THEN statementList FI .)


state 47

    (8) statement -> IF relation THEN statementList ELSE . statementList FI
    (3) statementList -> . statement SEMICOLON statementList
    (4) statementList -> . empty
    (5) statement -> . IDENTIFIER ASSIGN expression
    (6) statement -> . TYPE IDENTIFIER ASSIGN expression
    (7) statement -> . IF relation THEN statementList FI
    (8) statement -> . IF relation THEN statementList ELSE statementList FI
    (9) statement -> . WHILE relation DO statementList OD
    (10) statement -> . WRITE LPAREN expression RPAREN
    (2) empty -> .

    IDENTIFIER      shift and go to state 6
    TYPE            shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    WRITE           shift and go to state 10
    FI              reduce using rule 2 (empty -> .)

    statementList                  shift and go to state 51
    statement                      shift and go to state 4
    empty                          shift and go to state 5

state 48

    (21) factor -> LPAREN TYPE RPAREN LPAREN . expression RPAREN
    (11) expression -> . term
    (12) expression -> . expression ADDOP term
    (13) term -> . factor
    (14) term -> . factor MULOP factor
    (15) factor -> . IDENTIFIER
    (16) factor -> . LPAREN TYPE RPAREN IDENTIFIER
    (17) factor -> . NUMBER_INT
    (18) factor -> . NUMBER_FLOAT
    (19) factor -> . READ
    (20) factor -> . LPAREN expression RPAREN
    (21) factor -> . LPAREN TYPE RPAREN LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_INT      shift and go to state 21
    NUMBER_FLOAT    shift and go to state 22
    READ            shift and go to state 23

    expression                     shift and go to state 52
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 49

    (16) factor -> LPAREN TYPE RPAREN IDENTIFIER .

    MULOP           reduce using rule 16 (factor -> LPAREN TYPE RPAREN IDENTIFIER .)
    CMP             reduce using rule 16 (factor -> LPAREN TYPE RPAREN IDENTIFIER .)
    ADDOP           reduce using rule 16 (factor -> LPAREN TYPE RPAREN IDENTIFIER .)
    SEMICOLON       reduce using rule 16 (factor -> LPAREN TYPE RPAREN IDENTIFIER .)
    RPAREN          reduce using rule 16 (factor -> LPAREN TYPE RPAREN IDENTIFIER .)
    THEN            reduce using rule 16 (factor -> LPAREN TYPE RPAREN IDENTIFIER .)
    DO              reduce using rule 16 (factor -> LPAREN TYPE RPAREN IDENTIFIER .)


state 50

    (9) statement -> WHILE relation DO statementList OD .

    SEMICOLON       reduce using rule 9 (statement -> WHILE relation DO statementList OD .)


state 51

    (8) statement -> IF relation THEN statementList ELSE statementList . FI

    FI              shift and go to state 53


state 52

    (21) factor -> LPAREN TYPE RPAREN LPAREN expression . RPAREN
    (12) expression -> expression . ADDOP term

    RPAREN          shift and go to state 54
    ADDOP           shift and go to state 31


state 53

    (8) statement -> IF relation THEN statementList ELSE statementList FI .

    SEMICOLON       reduce using rule 8 (statement -> IF relation THEN statementList ELSE statementList FI .)


state 54

    (21) factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN .

    MULOP           reduce using rule 21 (factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN .)
    CMP             reduce using rule 21 (factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN .)
    ADDOP           reduce using rule 21 (factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 21 (factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN .)
    RPAREN          reduce using rule 21 (factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN .)
    THEN            reduce using rule 21 (factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN .)
    DO              reduce using rule 21 (factor -> LPAREN TYPE RPAREN LPAREN expression RPAREN .)

